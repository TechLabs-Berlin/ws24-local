{"version":3,"names":[],"sources":["Skia.ts"],"sourcesContent":["import type { ImageFilterFactory } from \"./ImageFilter\";\nimport type { PathFactory } from \"./Path\";\nimport type { ColorFilterFactory } from \"./ColorFilter\";\nimport type { SkFont } from \"./Font\";\nimport type { SkTypeface, TypefaceFactory } from \"./Typeface\";\nimport type { ImageFactory } from \"./Image\";\nimport type { MaskFilterFactory } from \"./MaskFilter\";\nimport type { SkPaint } from \"./Paint\";\nimport type { SkRect } from \"./Rect\";\nimport type { SkRRect } from \"./RRect\";\nimport type {\n  RuntimeEffectFactory,\n  SkRuntimeEffect,\n  SkRuntimeShaderBuilder,\n} from \"./RuntimeEffect\";\nimport type { ShaderFactory } from \"./Shader\";\nimport type { SkMatrix } from \"./Matrix\";\nimport type { PathEffectFactory } from \"./PathEffect\";\nimport type { SkPoint } from \"./Point\";\nimport type { SkVertices, VertexMode } from \"./Vertices/Vertices\";\nimport type { DataFactory } from \"./Data\";\nimport type { SVGFactory } from \"./SVG\";\nimport type { TextBlobFactory } from \"./TextBlob\";\nimport type { SurfaceFactory } from \"./Surface\";\nimport type { SkRSXform } from \"./RSXform\";\nimport type { SkPath } from \"./Path/Path\";\nimport type { SkContourMeasureIter } from \"./ContourMeasure\";\nimport type { PictureFactory, SkPictureRecorder } from \"./Picture\";\nimport type { Color, SkColor } from \"./Color\";\n\n/**\n * Declares the interface for the native Skia API\n */\nexport interface Skia {\n  Point: (x: number, y: number) => SkPoint;\n  XYWHRect: (x: number, y: number, width: number, height: number) => SkRect;\n  RuntimeShaderBuilder: (rt: SkRuntimeEffect) => SkRuntimeShaderBuilder;\n  RRectXY: (rect: SkRect, rx: number, ry: number) => SkRRect;\n  RSXform: (scos: number, ssin: number, tx: number, ty: number) => SkRSXform;\n  Color: (color: Color) => SkColor;\n  ContourMeasureIter: (\n    path: SkPath,\n    forceClosed: boolean,\n    resScale: number\n  ) => SkContourMeasureIter;\n  Paint: () => SkPaint;\n  PictureRecorder: () => SkPictureRecorder;\n  Picture: PictureFactory;\n  Path: PathFactory;\n  Matrix: (matrix?: readonly number[]) => SkMatrix;\n  ColorFilter: ColorFilterFactory;\n  Font: (typeface?: SkTypeface, size?: number) => SkFont;\n  Typeface: TypefaceFactory;\n  MaskFilter: MaskFilterFactory;\n  RuntimeEffect: RuntimeEffectFactory;\n  ImageFilter: ImageFilterFactory;\n  Shader: ShaderFactory;\n  PathEffect: PathEffectFactory;\n  /**\n   * Returns an Vertices based on the given positions and optional parameters.\n   * See SkVertices.h (especially the Builder) for more details.\n   * @param mode\n   * @param positions\n   * @param textureCoordinates\n   * @param colors - either a list of int colors or a flattened color array.\n   * @param indices\n   * @param isVolatile\n   */\n  MakeVertices(\n    mode: VertexMode,\n    positions: SkPoint[],\n    textureCoordinates?: SkPoint[] | null,\n    colors?: SkColor[],\n    indices?: number[] | null,\n    isVolatile?: boolean\n  ): SkVertices;\n  Data: DataFactory;\n  Image: ImageFactory;\n  SVG: SVGFactory;\n  TextBlob: TextBlobFactory;\n  Surface: SurfaceFactory;\n}\n"],"mappings":""}