{"version":3,"names":["JsiDrawingNode","JsiRenderNode","constructor","ctx","type","props","derived","deriveProps","setProps","setProp","name","value","hasChanged","addChild","child","JsiDeclarationNode","Error","insertChildBefore","before","renderNode","paint","draw","children","map","PaintNode","declCtx","declarationCtx","save","decorate","paints","pop","restore"],"sources":["DrawingNode.ts"],"sourcesContent":["import type {\n  DrawingContext,\n  DrawingNodeProps,\n  Node,\n  NodeType,\n  RenderNode,\n} from \"../types\";\n\nimport type { NodeContext } from \"./Node\";\nimport { JsiDeclarationNode } from \"./Node\";\nimport { PaintNode } from \"./PaintNode\";\nimport { JsiRenderNode } from \"./RenderNode\";\n\nexport abstract class JsiDrawingNode<P extends DrawingNodeProps, C>\n  extends JsiRenderNode<P>\n  implements RenderNode<P>\n{\n  protected derived?: C;\n\n  constructor(ctx: NodeContext, type: NodeType, props: P) {\n    super(ctx, type, props);\n    this.derived = this.deriveProps();\n  }\n\n  setProps(props: P) {\n    super.setProps(props);\n    this.derived = this.deriveProps();\n  }\n\n  setProp<K extends keyof P>(name: K, value: P[K]) {\n    const hasChanged = super.setProp(name, value);\n    if (hasChanged) {\n      this.derived = this.deriveProps();\n    }\n    return hasChanged;\n  }\n\n  addChild(child: Node<unknown>): void {\n    if (!(child instanceof JsiDeclarationNode)) {\n      throw new Error(`Cannot add ${child.type} to ${this.type}`);\n    }\n    super.addChild(child);\n    this.derived = this.deriveProps();\n  }\n\n  insertChildBefore(child: Node<unknown>, before: Node<unknown>): void {\n    if (!(child instanceof JsiDeclarationNode)) {\n      throw new Error(`Cannot add ${child.type} to ${this.type}`);\n    }\n    super.insertChildBefore(child, before);\n    this.derived = this.deriveProps();\n  }\n\n  renderNode(ctx: DrawingContext): void {\n    if (this.props.paint) {\n      this.draw({ ...ctx, paint: this.props.paint });\n    } else {\n      this.draw(ctx);\n    }\n    this.children().map((child) => {\n      if (child instanceof PaintNode) {\n        const declCtx = ctx.declarationCtx;\n        declCtx.save();\n        child.decorate(declCtx);\n        const paint = declCtx.paints.pop()!;\n        declCtx.restore();\n        this.draw({ ...ctx, paint });\n      }\n    });\n  }\n\n  protected abstract draw(ctx: DrawingContext): void;\n  protected abstract deriveProps(): C;\n}\n"],"mappings":";;;;;;;AASA;;AACA;;AACA;;;;AAEO,MAAeA,cAAf,SACGC,yBADH,CAGP;EAGEC,WAAW,CAACC,GAAD,EAAmBC,IAAnB,EAAmCC,KAAnC,EAA6C;IACtD,MAAMF,GAAN,EAAWC,IAAX,EAAiBC,KAAjB;;IADsD;;IAEtD,KAAKC,OAAL,GAAe,KAAKC,WAAL,EAAf;EACD;;EAEDC,QAAQ,CAACH,KAAD,EAAW;IACjB,MAAMG,QAAN,CAAeH,KAAf;IACA,KAAKC,OAAL,GAAe,KAAKC,WAAL,EAAf;EACD;;EAEDE,OAAO,CAAoBC,IAApB,EAA6BC,KAA7B,EAA0C;IAC/C,MAAMC,UAAU,GAAG,MAAMH,OAAN,CAAcC,IAAd,EAAoBC,KAApB,CAAnB;;IACA,IAAIC,UAAJ,EAAgB;MACd,KAAKN,OAAL,GAAe,KAAKC,WAAL,EAAf;IACD;;IACD,OAAOK,UAAP;EACD;;EAEDC,QAAQ,CAACC,KAAD,EAA6B;IACnC,IAAI,EAAEA,KAAK,YAAYC,wBAAnB,CAAJ,EAA4C;MAC1C,MAAM,IAAIC,KAAJ,CAAW,cAAaF,KAAK,CAACV,IAAK,OAAM,KAAKA,IAAK,EAAnD,CAAN;IACD;;IACD,MAAMS,QAAN,CAAeC,KAAf;IACA,KAAKR,OAAL,GAAe,KAAKC,WAAL,EAAf;EACD;;EAEDU,iBAAiB,CAACH,KAAD,EAAuBI,MAAvB,EAAoD;IACnE,IAAI,EAAEJ,KAAK,YAAYC,wBAAnB,CAAJ,EAA4C;MAC1C,MAAM,IAAIC,KAAJ,CAAW,cAAaF,KAAK,CAACV,IAAK,OAAM,KAAKA,IAAK,EAAnD,CAAN;IACD;;IACD,MAAMa,iBAAN,CAAwBH,KAAxB,EAA+BI,MAA/B;IACA,KAAKZ,OAAL,GAAe,KAAKC,WAAL,EAAf;EACD;;EAEDY,UAAU,CAAChB,GAAD,EAA4B;IACpC,IAAI,KAAKE,KAAL,CAAWe,KAAf,EAAsB;MACpB,KAAKC,IAAL,CAAU,EAAE,GAAGlB,GAAL;QAAUiB,KAAK,EAAE,KAAKf,KAAL,CAAWe;MAA5B,CAAV;IACD,CAFD,MAEO;MACL,KAAKC,IAAL,CAAUlB,GAAV;IACD;;IACD,KAAKmB,QAAL,GAAgBC,GAAhB,CAAqBT,KAAD,IAAW;MAC7B,IAAIA,KAAK,YAAYU,oBAArB,EAAgC;QAC9B,MAAMC,OAAO,GAAGtB,GAAG,CAACuB,cAApB;QACAD,OAAO,CAACE,IAAR;QACAb,KAAK,CAACc,QAAN,CAAeH,OAAf;QACA,MAAML,KAAK,GAAGK,OAAO,CAACI,MAAR,CAAeC,GAAf,EAAd;QACAL,OAAO,CAACM,OAAR;QACA,KAAKV,IAAL,CAAU,EAAE,GAAGlB,GAAL;UAAUiB;QAAV,CAAV;MACD;IACF,CATD;EAUD;;AArDH"}